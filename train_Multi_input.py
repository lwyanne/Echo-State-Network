# -*- coding: utf-8 -*-
"""
Created on Tue Aug  7 11:00:03 2018

@author: acerr
"""

import random
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import scipy
import scipy.linalg
from math import *
import image
from mpl_toolkits.mplot3d import Axes3D
from function import *
from ESN import *




#%% <without regularization>
timeshift=0


timeseries=np.load('timeseries generated by Reservoir.npy')
n_inputs=np.shape(timeseries[:30,:])[0]

# using 8000 of the timeseries to train , 2000 of the timeseries to test
input_train=timeseries[:30,12:8000-timeshift]
mutiEsn=ESN(n_inputs=n_inputs, n_outputs=1, ifplot=1, n_reservoir=200,  sparsity=0.9, sparsity_in=0.1)

output_target=timeseries[22,12+timeshift:8000]

input_valid=timeseries[:30,8000-timeshift:9000]
output_valid_true=timeseries[22,8000:9000+timeshift]




mutiEsn.initweights()
mutiEsn.update(input_train,1)
mutiEsn.allstate=discard(mutiEsn.allstate)  # optimal!!! 
output_target=discard(output_target)
mutiEsn.fit(input_train,output_target,0)
mutiEsn.predict()
plt.plot(mutiEsn.outputs,label='trainOut')
plt.plot(output_target,label='target')
mutiEsn.mydel(0)


mutiEsn.update(input_valid,0)
mutiEsn.allstate=discard(mutiEsn.allstate)
input_valid=discard(input_valid)
output_valid_true=discard(output_valid_true)
mutiEsn.predict()
plt.figure()
plt.plot(mutiEsn.outputs,label='outputs')
plt.plot(output_valid_true,label='true')
plt.legend()
plt.show()


"""
n_reservoir=100, n_inputs=2, perform terrible
n_reservoir=400, n_inputs=2, perform good
"""


#%% <regularization>
timeshift=1


timeseries=np.load('timeseries generated by Reservoir.npy')
n_inputs=np.shape(timeseries[:13,:])[0]

# using 8000 of the timeseries to train , 2000 of the timeseries to test
input_train=timeseries[:13,12:8000-timeshift]
mutiEsn=ESN(n_inputs=n_inputs, n_outputs=1, ifplot=1, n_reservoir=1500, spectral_radius=0.8, sparsity=0.01, sparsity_in=0.01)

output_target=timeseries[4,12+timeshift:8000]

input_valid=timeseries[:13,8000-timeshift:9000]
output_valid_true=timeseries[4,8000:9000+timeshift]

err=[]
para=[]
x=np.linspace(-6, 2.5, num=50)

mutiEsn.initweights()
output_target=discard(output_target)
output_valid_true=discard(output_valid_true)
error,lamda=mutiEsn.choose(timeshift,input_train,output_target,input_valid,output_valid_true,x,1)
err.append(error)
para.append(lamda)





timeseries=np.load('timeseries generated by Reservoir.npy')
n_inputs=np.shape(timeseries[:13,:])[0]



#%%
timeshift=1


timeseries=np.load('timeseries generated by Reservoir.npy')
#for i in range(np.shape(timeseries)[0]):
#    timeseries[i,:]=normal(timeseries[i,:])

# using 8000 of the timeseries to train , 2000 of the timeseries to test

err=[]
para=[]
#x=np.linspace(-8, 2, num=100)s


# spectral radius
n_inputs=np.shape(timeseries[:13,:])[0]
# using 8000 of the timeseries to train , 2000 of the timeseries to test
input_train=timeseries[3,12:8000-timeshift]

output_target=timeseries[3,12+timeshift:8000]

input_valid=timeseries[3,8000-timeshift:9000]
output_valid_true=timeseries[3,8000:9000+timeshift]
mutiEsn=ESN(n_inputs=1, n_outputs=1, ifplot=1, n_reservoir=200,alpha=0,spectral_radius=0.95, sparsity=0.1, sparsity_in=0.1)
mutiEsn.initweights()
output_target=discard(output_target)
output_valid_true=discard(output_valid_true)
error,lamda=mutiEsn.choose(timeshift,input_train,output_target,input_valid,output_valid_true,1)

err.append(error)
para.append(lamda)


#plt.figure()
#plt.plot(np.linspace(0.1,1,10),err)
#plt.title('NMSE with respect to indegree')
#plt.xlabel('indegree(non-zero/all connections;per input neuron)')
#plt.ylabel('NMSE')

